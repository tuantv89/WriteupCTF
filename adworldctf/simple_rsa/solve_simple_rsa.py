import gmpy2
from Crypto.Util.number import inverse, long_to_bytes, bytes_to_long
n = 472454298637887924907885713362624869065820136943087479342337646123282121762864612897457093037461067495161313705021580182241057464956308234807959882570378732839911551112441080455409288889347291071635251825929005749223685642071168172274795938777475826198582703046179434027882611408016515344506227776607939235649406160693798024596877922012929606345947098486696636801100077170044029480214419759525603679825207536784252964449018121830437658684322229303431829804155070484668726631601875716812144213949598871754303714550783970941454501489539175341903842509365403108569028360234149249853857889671056919935402970037368393055152729538400144829629609789561629791193708225157602050929409884793225768247903377223629814284852141205403892337193459139249793190955211015318431144467214342845177474360752538497125099220613279687341565764795895634047919485621068152823538832319595776897792609560234206832836590430385004836782911533077489708513817303723640100268389043054960717878691358288953214559716798081458686447572057250670690628681571457076864246744632672016188051932895001202445800789244554705976605666538059511712753142895237728033485136774844527792601322955961996386560805542459404216688731509486098555992281992350759291627029503042181435793591
d = 228243214507441133871073890638480033866257707184568910439259536046954167220563292627773456561317345285324356519442273069410167087263403497600665545295951310869347690919190641138573836085350635253658905779342024368313641318852179005788978961771726843359832262098434274696076893354734133273149696776403923953490331392247529475819182322792489193379602836339583780425708066333228008870913663182726400935455481572579248868691279166810709777859900912491813100438368458834171484106430672552451123761506603138358683032583004582205126737135668398469567077493461983731638677493833611538514472658877814564933927299607139794200494329554495984513333034677368181916740163331336554490591399781706963588274758619009964658783035801546155666570671481137484447984098988352739047744507929921290086732192941032255563191656871601852869999584558689711124113140199765371277294351780607700120862158082707559667703207718758672793561255829012767492205316892085830225920107570441270379770230780350715709588168381904999449479702631163078543331148981196215936090508745558445574799950604371280599960000249436365911282798551759406674397302987453459274086772949292101300608356687223690408482890826618784829098075642709498305404477487188858985646213378187599940097729
e = 65537
new_n = 472454298637887924907885713362624869065820136943087479342337646123282121762864612897457093037461067495161313705021580182241057464956308234807959882570378732839911551112441080455409288889347291071635251825929005749223685642071168172274795938777475826198582703046179434027882611408016515344506227776607939235649406160693798024596877922012929606345899867102496852302624088509689971364106316789341245249791404421867046885137838665110688808139593360605167243169530189426447890856921208705550148347681742058470434426808357091483439191761662709682487204042210104819584454793098853190326717728745453717394009389026667376737368526649873319422797841962943674760136159599140472414910873128705206427402341203693078095849481583316284432270352075053569731236441959596985162332031496859432648341636815197459127113766831415263454112702921300056460724371008979094585387116345983316476920110114577494843471500904698837042782315871709614136082147809626723441379375370279076005781355089207612324094983081340032082816886904282153968868339620028717949187188418401586900507281832871755185348978345049148908845252131288995589427705644977167720772364156553868797732321307274813624211467270080351055197742101721022348224694078463143222618164422570650835309003
c = 240771152404003057453127517180022768256721417192735061650959631668466288209217617853218917030170890355937097425828875121396535397951988301163998492293964913300353513257121681220267794385405575198025158356150574667485911093604557669653139680346858986193690196690097315084474720690224008235830458476405814567876116622326591233084644973020651138394576514924933979450157971806211475796411415965309109278663620771093482986076834442298939215158717249951926374523969685923887311882612588041076978349443550161323068035825379123010368551132855903484587455296501550911862475092585411433481155660952613310828864968395126710991434657816830643603322935750569310353473986439143650023774085947015595647784225083187657199174736505852785440949939910914062598571526782529676976580415351025508901138407957571452692059366821439821055302054481151805309177736611387093761068754888363986138652212788419366590217069118767018740646492395684813518070433796901086085495921693633964673158493883091427551407867120954131889190300579661973060636564482432747113525146228368482597014707241065795189646970793031322783463673968332680075811917878564212067631547527599410560866541566455685902320197808178065394860507342264732143416149373853287386746788219389865441727335
p = 18549922009255682065873541075490523694236993018017378711472390294347289738564184852893543842874884431799749016007575801573141434444916044586366999351488315491792727433264614393421339756775694364361870792935536914730184638908553444398548728815983615033645725832510366617312824482715041572565651201973381892649356584003444436598024263892174846508030188237071677814016044004832440289894928290725654672618489148762420471282901956872617107075453840794524807351894754626817085978425574873605883098036587598323071317767994487432181224109477252086528459769424114149210975886656634032363487078722904015201345359534672812718167
q = 25469341510015610710601677541490068882874022771473379147959682877979811860690835905177575433486769235926750944378553837429714908846121392087707617153368450157831411033840331452402635316893579428297241392591768100008774205252294780519995317089863801331600746389471563346749402400584048767782402832414560955794979239140648096754408560344380360521300295416056532504527346890878830708030202503589314586128121926254376071861981570648841288044240102936057199541504839050994656267226010545841307490110261343492485615893311098351703701000220286503350522201318815497988460167971677642567134161349144833221240627311534482202273

# to find new_p using sage
# n = 472454298637887924907885713362624869065820136943087479342337646123282121762864612897457093037461067495161313705021580182241057464956308234807959882570378732839911551112441080455409288889347291071635251825929005749223685642071168172274795938777475826198582703046179434027882611408016515344506227776607939235649406160693798024596877922012929606345899867102496852302624088509689971364106316789341245249791404421867046885137838665110688808139593360605167243169530189426447890856921208705550148347681742058470434426808357091483439191761662709682487204042210104819584454793098853190326717728745453717394009389026667376737368526649873319422797841962943674760136159599140472414910873128705206427402341203693078095849481583316284432270352075053569731236441959596985162332031496859432648341636815197459127113766831415263454112702921300056460724371008979094585387116345983316476920110114577494843471500904698837042782315871709614136082147809626723441379375370279076005781355089207612324094983081340032082816886904282153968868339620028717949187188418401586900507281832871755185348978345049148908845252131288995589427705644977167720772364156553868797732321307274813624211467270080351055197742101721022348224694078463143222618164422570650835309003
# p_fake = 18549922009255682065873541075490523694236993018017378711472390294347289738564184852893543842874884431799749016007575801573141434444916044586366999351488315491792727433264614393421339756775694364361870792935536914730184638908553444398548728815983615033645725832510366617312824482715041572565651201973381892649356584003444436598024263892174846508030188237071677814016044004832440289894928290725654672618489148762420471282901956872617107075453840794524807351894754626817085978425574873605883098036587598323071317767994487432181224109477252086528459769424114149210975886656634032363487078722904015201345359534672812718167

# pbits = 2048
# kbits = 900
# pbar = p_fake & (2 ^ pbits-2 ^ kbits)
# print("upper %d bits (of %d bits) is given" % (pbits-kbits, pbits))

# PR. < x > = PolynomialRing(Zmod(n))
# f = x + pbar

# # find root < 2^kbits with factor >= n^0.3
# x0 = f.small_roots(X=2 ^ kbits, beta=0.4)[0]
# p = int(x0 + pbar)
# print('p = ', p)


new_p = 18549922009255682065873541075490523694236993018017378711472390294347289738564184852893543842874884431799749016007575801573141434444916044586366999351488315491792727433264614393421339756775694364361870792935536914730184638908553444398548728815983615033645725832510366617312824482715041572565651201973381892649356584003444436598024263892174846508030770420183686897998285644302367866899840638369622217290489537959059780462703415271851188868247456080287061532074584546595405821143617748170955660518235370195713568906094673772115190597291737336608540077462642156787637875904278512658420610592836051568188911686690679110647
new_q = new_n//new_p
print(new_p)
print(new_q)
new_d = inverse(e, (new_p-1)*(new_q-1))
flag = long_to_bytes(pow(c, new_d, new_n))
print(flag)

