
from Crypto.Util.number import inverse, long_to_bytes


# find a,b,c using sage
# x = 4553352994596121904719118095314305574744898996748617662645730434291671964711800262656927311612741715902
# y = 4414187148384348278031172865715942397786003125047353436418952679980677617016484927045195450392723110402
# z = 2621331497797998680087841425011881226283342008022511638116013676175393387095787512291008541271355772802
# enc = 6238548897897912462708514382106387305984378113132192980353695746912882399991285268937548949835500837749446265632471076030233510866260067177632747513323223
# a, b, c = var('a,b,c')
# eq1 = a*b+c == x
# eq2 = b*c+a == y
# eq3 = c*a+b == z
# ans = solve([eq1, eq2, eq3], a, b, c)
# print(ans)

a = 1644376501336761869533914527999140316946467005479211
b = 2769045283056871559108237639832652911114008081576651
c = 1594118801665580510615541222527591707834932058213541
n = a*b*c
enc = 6238548897897912462708514382106387305984378113132192980353695746912882399991285268937548949835500837749446265632471076030233510866260067177632747513323223
phi = (a-1)*(b-1)*(c-1)
d = inverse(65537, phi)
print(long_to_bytes(pow(enc, d, n)))
#ASIS{m4dRa5_iZ_RSA_l1k3_cH41L3n9E?!!}
