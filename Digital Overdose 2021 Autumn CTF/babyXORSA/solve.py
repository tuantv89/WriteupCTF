from Crypto.Util.number import *
import itertools


def get_lower_bits(n, hint):

    candidate = [(1, 1)]

    for i in range(2, 1000):
        new_candidate = []

        for c in candidate:
            for a, b in itertools.product(range(2), range(2)):

                p, q = c[0] + a * (1 << (i-1)), c[1] + b * (1 << (i-1))
                if (p * q) % (1 << i) == n % (1 << i) and (p ^ q) % (1 << i) == hint % (1 << i):
                    new_candidate += [[p, q]]
        candidate = new_candidate.copy()

    return candidate


# def partial_p(p0, kbits, n):
#     PR.< x > = PolynomialRing(Zmod(n))
#     nbits = n.nbits()
#     f = 2 ^ kbits*x + p0
#     f = f.monic()
#     # find root < 2^(nbits//2-kbits) with factor >= n^0.3
#     roots = f.small_roots(X=2 ^ (nbits//2-kbits), beta=0.1)
#     if roots:
#         x0 = roots[0]
#         p = gcd(2 ^ kbits*x0 + p0, n)
#         return ZZ(p)

def test():
    N = 16733147763956605588669580724262835219479607020663026603477279941818449850070977623782287550005594133026254957322287714551969077852266364082161548196739433173354686239875409475317229375979202591026817258351695864204773313626566021549751301460605385690400248143101724777223050384830091022505751490928757890080696664108657501802793097526860339280729879447745818288282746130243984358928098717700507219924464997152578811506617126293305908853972455445915941571224309309428548360406929436339046422018255631778594530615885645486141395581917204348416680529284569425286437489153961097820093712286273971968302770804184721201699245836871383664578634067646527901779069780620348232834453766227569503859394374832054602862622652002542014849686502953191774089676346083527830548409804044283496469147003041229748279986379
    hint = 491932487872050030499881779381544379240535016263206906369883101031663569532110476170525015770197603004713518856816549843655676484676435701349516016401927962670075464449780860154098320204984315337282695671439641821256545349152197926379063582292282913477286107814761917663046364893502367239015965049114
    enc = 12620713940401548127018651577296443192631440648734999459441154880954999880776254484326167082680926623767727074806615216852598017696653165685060794283304598072407281306006776809426185358685994569107850310202359274763350610052023217046873492146031696516340988362254691355513792382001509753019802744620424328674145266441960137185920726073877334543268469691596602154155343061209297497529131344281467263723802471832949389744457617423433618825797755413000479461270925793899561497912930442588847616913741985138965607114562447215498263292226470390220022740439057180279628143377511757765653486117848410198255291638295713628596160379304606638539484845787692989054614341485377651060167461538702506987920019607133212509513966451111241508610313643215404168775178764123917487616017449366862604053014880325664657941025
    # res = get_lower_bits(N, hint)
    # print(len(res))
    # for e in res:
    #     p0=e[0]
    #     p=partial_p(p0,999,N)
    #     p=Integer(p)
    #     try:
    #         q = N//p
    #         if p*q == N and isPrime(q) and isPrime(p):
    #             print("p=", p)
    #             print("q=", q)
    #             break
    #     except:
    #         pass
    p = 116477105819708163806952077894976335987093964717874715827421178083658454648004379334666518093991125858155229186892536286306901883863155510749691839604888282221950326227962991027822967509056968698968673798359605552609710373922877293709055648439024865966625518899173836046693319991923243804330423501547808224273416215536481086311454349198213560614177564471703079594402548422669494088760674576600045222471
    q = 143660401296864322218920621011489864437080672168506019880908888979925971502559064756585964486568843856266944030277722775603768459997097416263913669083479633208256960451967801598554991750225500914022925907066128325962812151771978379598827620487099601139628571999658520095894210870399425865865061759775522820972651544963063710148507380300339483945009531307863304214343354005939551191321052645937715264349
    e = 1333
    d = inverse(e, (p-1)*(q-1))
    print(long_to_bytes(pow(enc, d, N)))


if __name__ == "__main__":
    test()

# D0{XoOOo0oOopp0rsmith!?}
